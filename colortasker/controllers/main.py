from flask import Blueprint, render_template, redirect, url_for, request, jsonifyfrom flask_login import login_required, current_userfrom colortasker.extensions import dbfrom colortasker.models import Folder, Task, Userfrom datetime import datetime, datemain_bp = Blueprint('main', __name__)@main_bp.route('/')def index():    if current_user.is_authenticated:        return redirect(url_for('main.dashboard'))    else:        return redirect(url_for('auth.login'))@main_bp.route('/dashboard')@login_requireddef dashboard():    user_folders = current_user.folders    user_tasks = current_user.tasks    return render_template('dashboard.html', folders=user_folders, tasks=user_tasks)@main_bp.route('/create_folder', methods=['POST'])@login_requireddef create_folder():    data = request.get_json()    folder_name = data.get('folder_name')    if not folder_name:        return jsonify({'error': 'Folder name is required.'}), 400    new_folder = Folder(name=folder_name, owner=current_user)    db.session.add(new_folder)    db.session.commit()    response = {'folder_name': new_folder.name, 'folder_id': new_folder.id}    return jsonify(response), 200@main_bp.route('/create_task', methods=['POST'])@login_requireddef create_task():    task_name = request.form.get('task_name')    folder_id = request.form.get('folder_id')    deadline = request.form.get('deadline')    color = request.form.get('color')    description = request.form.get('description')    if not task_name or not folder_id:        return jsonify({'error': 'Task name and folder are required.'}), 400    # Validate folder ownership    folder = Folder.query.filter_by(id=folder_id, owner_id=current_user.id).first()    if not folder:        return jsonify({'error': 'Folder not found or not authorized.'}), 403    # Parse deadline if provided    deadline_date = None    if deadline:        try:            deadline_date = datetime.strptime(deadline, '%Y-%m-%d').date()        except ValueError:            return jsonify({'error': 'Invalid date format.'}), 400    # Create new Task instance with correct parameters    new_task = Task(        name=task_name,        deadline=deadline_date,        folder_id=folder.id,        color=color,        description=description,    )    # Assign the current user to the task    new_task.users.append(current_user)    db.session.add(new_task)    db.session.commit()    response = {        'task_name': new_task.name,        'task_id': new_task.id,        'deadline': new_task.deadline.strftime('%Y-%m-%d') if new_task.deadline else None    }    return jsonify(response), 200@main_bp.route('/get_folder_content')@login_requireddef get_folder_content():    folder_id = request.args.get('folder_id')    folder = Folder.query.filter_by(id=folder_id, owner=current_user).first()    if not folder:        return jsonify({'error': 'Folder not found or not authorized.'}), 403    tasks = [        {            'id': task.id,            'name': task.name,            'deadline': task.deadline.strftime('%Y-%m-%d') if task.deadline else None,            'is_complete': task.is_complete        }        for task in folder.tasks    ]    response = {        'folder_name': folder.name,        'tasks': tasks    }    return jsonify(response), 200@main_bp.route('/edit_task', methods=['POST'])@login_requireddef edit_task():    task_id = request.form.get('task_id')    task_name = request.form.get('task_name')    deadline = request.form.get('deadline')    color = request.form.get('color')    description = request.form.get('description')    folder_id = request.form.get('folder_id')    task = Task.query.get(task_id)    if not task or current_user not in task.users:        return jsonify({'error': 'Task not found or not authorized.'}), 403    # Validate new folder ownership    folder = Folder.query.filter_by(id=folder_id, owner_id=current_user.id).first()    if not folder:        return jsonify({'error': 'Folder not found or not authorized.'}), 403    # Update task fields    task.name = task_name    task.description = description    task.color = color    task.folder_id = folder.id    # Parse deadline if provided    if deadline:        try:            task.deadline = datetime.strptime(deadline, '%Y-%m-%d').date()        except ValueError:            return jsonify({'error': 'Invalid date format.'}), 400    else:        task.deadline = None    db.session.commit()    response = {        'task_name': task.name,        'task_id': task.id,        'deadline': task.deadline.strftime('%Y-%m-%d') if task.deadline else None    }    return jsonify(response), 200@main_bp.route('/get_task')@login_requireddef get_task():    task_id = request.args.get('task_id')    task = Task.query.get(task_id)    if not task or current_user not in task.users:        return jsonify({'error': 'Task not found or not authorized.'}), 403    response = {        'task_id': task.id,        'task_name': task.name,        'deadline': task.deadline.strftime('%Y-%m-%d') if task.deadline else '',        'description': task.description or '',        'color': task.color or '#ffffff',        'folder_id': task.folder_id    }    return jsonify(response), 200@main_bp.route('/delete_task', methods=['POST'])@login_requireddef delete_task():    data = request.get_json()    task_id = data.get('task_id')    task = Task.query.get(task_id)    if not task or task.assignee != current_user:        return jsonify({'error': 'Task not found or not authorized.'}), 403    db.session.delete(task)    db.session.commit()    return jsonify({'message': 'Task deleted successfully.'}), 200@main_bp.route('/mark_complete', methods=['POST'])@login_requireddef mark_complete():    data = request.get_json()    task_id = data.get('task_id')    task = Task.query.get(task_id)    if not task or task.assignee != current_user:        return jsonify({'error': 'Task not found or not authorized.'}), 403    task.is_complete = True    db.session.commit()    return jsonify({'message': 'Task marked as complete.'}), 200@main_bp.route('/edit_folder', methods=['POST'])@login_requireddef edit_folder():    data = request.get_json()    folder_id = data.get('folder_id')    folder_name = data.get('folder_name')    if not folder_id or not folder_name:        return jsonify({'error': 'Folder ID and new name are required.'}), 400    folder = Folder.query.filter_by(id=folder_id, owner=current_user).first()    if not folder:        return jsonify({'error': 'Folder not found or not authorized.'}), 403    folder.name = folder_name    db.session.commit()    response = {'folder_name': folder.name, 'folder_id': folder.id}    return jsonify(response), 200@main_bp.route('/get_user_folders')@login_requireddef get_user_folders():    folders = [        {'id': folder.id, 'name': folder.name}        for folder in current_user.folders    ]    return jsonify({'folders': folders}), 200